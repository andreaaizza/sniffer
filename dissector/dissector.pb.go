// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: dissector/dissector.proto

package dissector

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Function Code, 16bit
type FunctionCode int32

const (
	FunctionCode_FuncCodeNouse                      FunctionCode = 0 // unused, protobuf3 requirement
	FunctionCode_FuncCodeReadInputRegisters         FunctionCode = 4
	FunctionCode_FuncCodeReadHoldingRegisters       FunctionCode = 3
	FunctionCode_FuncCodeWriteSingleRegister        FunctionCode = 6
	FunctionCode_FuncCodeWriteMultipleRegisters     FunctionCode = 16
	FunctionCode_FuncCodeReadWriteMultipleRegisters FunctionCode = 23
	FunctionCode_FuncCodeMaskWriteRegister          FunctionCode = 22
	FunctionCode_FuncCodeReadFIFOQueue              FunctionCode = 24
)

// Enum value maps for FunctionCode.
var (
	FunctionCode_name = map[int32]string{
		0:  "FuncCodeNouse",
		4:  "FuncCodeReadInputRegisters",
		3:  "FuncCodeReadHoldingRegisters",
		6:  "FuncCodeWriteSingleRegister",
		16: "FuncCodeWriteMultipleRegisters",
		23: "FuncCodeReadWriteMultipleRegisters",
		22: "FuncCodeMaskWriteRegister",
		24: "FuncCodeReadFIFOQueue",
	}
	FunctionCode_value = map[string]int32{
		"FuncCodeNouse":                      0,
		"FuncCodeReadInputRegisters":         4,
		"FuncCodeReadHoldingRegisters":       3,
		"FuncCodeWriteSingleRegister":        6,
		"FuncCodeWriteMultipleRegisters":     16,
		"FuncCodeReadWriteMultipleRegisters": 23,
		"FuncCodeMaskWriteRegister":          22,
		"FuncCodeReadFIFOQueue":              24,
	}
)

func (x FunctionCode) Enum() *FunctionCode {
	p := new(FunctionCode)
	*p = x
	return p
}

func (x FunctionCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FunctionCode) Descriptor() protoreflect.EnumDescriptor {
	return file_dissector_dissector_proto_enumTypes[0].Descriptor()
}

func (FunctionCode) Type() protoreflect.EnumType {
	return &file_dissector_dissector_proto_enumTypes[0]
}

func (x FunctionCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FunctionCode.Descriptor instead.
func (FunctionCode) EnumDescriptor() ([]byte, []int) {
	return file_dissector_dissector_proto_rawDescGZIP(), []int{0}
}

// Exception Code, 8bit
type ExceptionCode int32

const (
	ExceptionCode_ExceptionCodeNouse                              ExceptionCode = 0 // unused, protobuf3 requirement
	ExceptionCode_ExceptionCodeIllegalFunction                    ExceptionCode = 1
	ExceptionCode_ExceptionCodeIllegalDataAddress                 ExceptionCode = 2
	ExceptionCode_ExceptionCodeIllegalDataValue                   ExceptionCode = 3
	ExceptionCode_ExceptionCodeServerDeviceFailure                ExceptionCode = 4
	ExceptionCode_ExceptionCodeAcknowledge                        ExceptionCode = 5
	ExceptionCode_ExceptionCodeServerDeviceBusy                   ExceptionCode = 6
	ExceptionCode_ExceptionCodeMemoryParityError                  ExceptionCode = 8
	ExceptionCode_ExceptionCodeGatewayPathUnavailable             ExceptionCode = 10
	ExceptionCode_ExceptionCodeGatewayTargetDeviceFailedToRespond ExceptionCode = 11
)

// Enum value maps for ExceptionCode.
var (
	ExceptionCode_name = map[int32]string{
		0:  "ExceptionCodeNouse",
		1:  "ExceptionCodeIllegalFunction",
		2:  "ExceptionCodeIllegalDataAddress",
		3:  "ExceptionCodeIllegalDataValue",
		4:  "ExceptionCodeServerDeviceFailure",
		5:  "ExceptionCodeAcknowledge",
		6:  "ExceptionCodeServerDeviceBusy",
		8:  "ExceptionCodeMemoryParityError",
		10: "ExceptionCodeGatewayPathUnavailable",
		11: "ExceptionCodeGatewayTargetDeviceFailedToRespond",
	}
	ExceptionCode_value = map[string]int32{
		"ExceptionCodeNouse":                              0,
		"ExceptionCodeIllegalFunction":                    1,
		"ExceptionCodeIllegalDataAddress":                 2,
		"ExceptionCodeIllegalDataValue":                   3,
		"ExceptionCodeServerDeviceFailure":                4,
		"ExceptionCodeAcknowledge":                        5,
		"ExceptionCodeServerDeviceBusy":                   6,
		"ExceptionCodeMemoryParityError":                  8,
		"ExceptionCodeGatewayPathUnavailable":             10,
		"ExceptionCodeGatewayTargetDeviceFailedToRespond": 11,
	}
)

func (x ExceptionCode) Enum() *ExceptionCode {
	p := new(ExceptionCode)
	*p = x
	return p
}

func (x ExceptionCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExceptionCode) Descriptor() protoreflect.EnumDescriptor {
	return file_dissector_dissector_proto_enumTypes[1].Descriptor()
}

func (ExceptionCode) Type() protoreflect.EnumType {
	return &file_dissector_dissector_proto_enumTypes[1]
}

func (x ExceptionCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExceptionCode.Descriptor instead.
func (ExceptionCode) EnumDescriptor() ([]byte, []int) {
	return file_dissector_dissector_proto_rawDescGZIP(), []int{1}
}

// Dissector
type DissectorBuffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimedBytes []*TimedByte `protobuf:"bytes,1,rep,name=timedBytes,proto3" json:"timedBytes,omitempty"`
}

func (x *DissectorBuffer) Reset() {
	*x = DissectorBuffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dissector_dissector_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DissectorBuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DissectorBuffer) ProtoMessage() {}

func (x *DissectorBuffer) ProtoReflect() protoreflect.Message {
	mi := &file_dissector_dissector_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DissectorBuffer.ProtoReflect.Descriptor instead.
func (*DissectorBuffer) Descriptor() ([]byte, []int) {
	return file_dissector_dissector_proto_rawDescGZIP(), []int{0}
}

func (x *DissectorBuffer) GetTimedBytes() []*TimedByte {
	if x != nil {
		return x.TimedBytes
	}
	return nil
}

type TimedByte struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Byte uint32               `protobuf:"varint,2,opt,name=byte,proto3" json:"byte,omitempty"` // 8bit
}

func (x *TimedByte) Reset() {
	*x = TimedByte{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dissector_dissector_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimedByte) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimedByte) ProtoMessage() {}

func (x *TimedByte) ProtoReflect() protoreflect.Message {
	mi := &file_dissector_dissector_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimedByte.ProtoReflect.Descriptor instead.
func (*TimedByte) Descriptor() ([]byte, []int) {
	return file_dissector_dissector_proto_rawDescGZIP(), []int{1}
}

func (x *TimedByte) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TimedByte) GetByte() uint32 {
	if x != nil {
		return x.Byte
	}
	return 0
}

// ADU, Application Data Unit
// max size is 256 bytes
type ADU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address uint32 `protobuf:"varint,1,opt,name=address,proto3" json:"address,omitempty"` // 8bit
	// Types that are assignable to PDU:
	//	*ADU_PduRequest
	//	*ADU_PduResponse
	//	*ADU_PduResponseException
	PDU   isADU_PDU            `protobuf_oneof:"PDU"`
	Crc16 uint32               `protobuf:"varint,15,opt,name=crc16,proto3" json:"crc16,omitempty"` // 16bit CRC
	Time  *timestamp.Timestamp `protobuf:"bytes,16,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ADU) Reset() {
	*x = ADU{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dissector_dissector_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADU) ProtoMessage() {}

func (x *ADU) ProtoReflect() protoreflect.Message {
	mi := &file_dissector_dissector_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADU.ProtoReflect.Descriptor instead.
func (*ADU) Descriptor() ([]byte, []int) {
	return file_dissector_dissector_proto_rawDescGZIP(), []int{2}
}

func (x *ADU) GetAddress() uint32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (m *ADU) GetPDU() isADU_PDU {
	if m != nil {
		return m.PDU
	}
	return nil
}

func (x *ADU) GetPduRequest() *PDURequest {
	if x, ok := x.GetPDU().(*ADU_PduRequest); ok {
		return x.PduRequest
	}
	return nil
}

func (x *ADU) GetPduResponse() *PDUResponse {
	if x, ok := x.GetPDU().(*ADU_PduResponse); ok {
		return x.PduResponse
	}
	return nil
}

func (x *ADU) GetPduResponseException() *PDUResponseException {
	if x, ok := x.GetPDU().(*ADU_PduResponseException); ok {
		return x.PduResponseException
	}
	return nil
}

func (x *ADU) GetCrc16() uint32 {
	if x != nil {
		return x.Crc16
	}
	return 0
}

func (x *ADU) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type isADU_PDU interface {
	isADU_PDU()
}

type ADU_PduRequest struct {
	PduRequest *PDURequest `protobuf:"bytes,2,opt,name=pduRequest,proto3,oneof"`
}

type ADU_PduResponse struct {
	PduResponse *PDUResponse `protobuf:"bytes,3,opt,name=pduResponse,proto3,oneof"`
}

type ADU_PduResponseException struct {
	PduResponseException *PDUResponseException `protobuf:"bytes,4,opt,name=pduResponseException,proto3,oneof"`
}

func (*ADU_PduRequest) isADU_PDU() {}

func (*ADU_PduResponse) isADU_PDU() {}

func (*ADU_PduResponseException) isADU_PDU() {}

// PDU, Protocol Data Unit
// max size is 253 bytes
type PDURequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionCode uint32 `protobuf:"varint,1,opt,name=functionCode,proto3" json:"functionCode,omitempty"` // 8bit
	Data         []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PDURequest) Reset() {
	*x = PDURequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dissector_dissector_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PDURequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PDURequest) ProtoMessage() {}

func (x *PDURequest) ProtoReflect() protoreflect.Message {
	mi := &file_dissector_dissector_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PDURequest.ProtoReflect.Descriptor instead.
func (*PDURequest) Descriptor() ([]byte, []int) {
	return file_dissector_dissector_proto_rawDescGZIP(), []int{3}
}

func (x *PDURequest) GetFunctionCode() uint32 {
	if x != nil {
		return x.FunctionCode
	}
	return 0
}

func (x *PDURequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type PDUResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionCode uint32 `protobuf:"varint,1,opt,name=functionCode,proto3" json:"functionCode,omitempty"` // 8bit
	Data         []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PDUResponse) Reset() {
	*x = PDUResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dissector_dissector_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PDUResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PDUResponse) ProtoMessage() {}

func (x *PDUResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dissector_dissector_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PDUResponse.ProtoReflect.Descriptor instead.
func (*PDUResponse) Descriptor() ([]byte, []int) {
	return file_dissector_dissector_proto_rawDescGZIP(), []int{4}
}

func (x *PDUResponse) GetFunctionCode() uint32 {
	if x != nil {
		return x.FunctionCode
	}
	return 0
}

func (x *PDUResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type PDUResponseException struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionExceptionCode uint32 `protobuf:"varint,1,opt,name=functionExceptionCode,proto3" json:"functionExceptionCode,omitempty"` // 8bit
	ExceptionCode         uint32 `protobuf:"varint,2,opt,name=exceptionCode,proto3" json:"exceptionCode,omitempty"`
}

func (x *PDUResponseException) Reset() {
	*x = PDUResponseException{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dissector_dissector_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PDUResponseException) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PDUResponseException) ProtoMessage() {}

func (x *PDUResponseException) ProtoReflect() protoreflect.Message {
	mi := &file_dissector_dissector_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PDUResponseException.ProtoReflect.Descriptor instead.
func (*PDUResponseException) Descriptor() ([]byte, []int) {
	return file_dissector_dissector_proto_rawDescGZIP(), []int{5}
}

func (x *PDUResponseException) GetFunctionExceptionCode() uint32 {
	if x != nil {
		return x.FunctionExceptionCode
	}
	return 0
}

func (x *PDUResponseException) GetExceptionCode() uint32 {
	if x != nil {
		return x.ExceptionCode
	}
	return 0
}

// this depends on dissected protocol. Now it only supports Modbus ADU. Can be extended with `oneof`
type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adu *ADU `protobuf:"bytes,1,opt,name=adu,proto3" json:"adu,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dissector_dissector_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_dissector_dissector_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_dissector_dissector_proto_rawDescGZIP(), []int{6}
}

func (x *Result) GetAdu() *ADU {
	if x != nil {
		return x.Adu
	}
	return nil
}

var File_dissector_dissector_proto protoreflect.FileDescriptor

var file_dissector_dissector_proto_rawDesc = []byte{
	0x0a, 0x19, 0x64, 0x69, 0x73, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x64, 0x69, 0x73, 0x73,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x64, 0x69, 0x73,
	0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x47, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x73, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x64, 0x69, 0x73, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x64,
	0x42, 0x79, 0x74, 0x65, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x22, 0x4f, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x79, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x79, 0x74,
	0x65, 0x22, 0xb8, 0x02, 0x0a, 0x03, 0x41, 0x44, 0x55, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x64, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x73, 0x73, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x50, 0x44, 0x55, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x70, 0x64, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x70, 0x64, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x64, 0x69, 0x73, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x44,
	0x55, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x64, 0x75,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x70, 0x64, 0x75, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x69, 0x73, 0x73, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x50, 0x44, 0x55, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x70, 0x64, 0x75, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x72, 0x63, 0x31, 0x36, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x63, 0x72, 0x63, 0x31, 0x36, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x50, 0x44, 0x55, 0x22, 0x44, 0x0a, 0x0a,
	0x50, 0x44, 0x55, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x45, 0x0a, 0x0b, 0x50, 0x44, 0x55, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x72, 0x0a, 0x14, 0x50, 0x44, 0x55,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x15, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2a, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x03, 0x61, 0x64, 0x75, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x69, 0x73, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x41, 0x44, 0x55, 0x52, 0x03, 0x61, 0x64, 0x75, 0x2a, 0x8a, 0x02, 0x0a, 0x0c, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x75,
	0x6e, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x75, 0x73, 0x65, 0x10, 0x00, 0x12, 0x1e, 0x0a,
	0x1a, 0x46, 0x75, 0x6e, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x10, 0x04, 0x12, 0x20, 0x0a,
	0x1c, 0x46, 0x75, 0x6e, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x61, 0x64, 0x48, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x10, 0x03, 0x12,
	0x1f, 0x0a, 0x1b, 0x46, 0x75, 0x6e, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x10, 0x06,
	0x12, 0x22, 0x0a, 0x1e, 0x46, 0x75, 0x6e, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x10, 0x10, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x75, 0x6e, 0x63, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x10, 0x17, 0x12, 0x1d, 0x0a, 0x19,
	0x46, 0x75, 0x6e, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x10, 0x16, 0x12, 0x19, 0x0a, 0x15, 0x46,
	0x75, 0x6e, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x61, 0x64, 0x46, 0x49, 0x46, 0x4f, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x10, 0x18, 0x2a, 0xfa, 0x02, 0x0a, 0x0d, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x75, 0x73, 0x65, 0x10, 0x00,
	0x12, 0x20, 0x0a, 0x1c, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x04,
	0x12, 0x1c, 0x0a, 0x18, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x10, 0x05, 0x12, 0x21,
	0x0a, 0x1d, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x73, 0x79, 0x10,
	0x06, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x69, 0x74, 0x79, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x08, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x61, 0x74,
	0x68, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x0a, 0x12, 0x33,
	0x0a, 0x2f, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x10, 0x0b, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x6e, 0x64, 0x72, 0x65, 0x61, 0x61, 0x69, 0x7a, 0x7a, 0x61, 0x2f, 0x73, 0x6e,
	0x69, 0x66, 0x66, 0x65, 0x72, 0x2f, 0x64, 0x69, 0x73, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dissector_dissector_proto_rawDescOnce sync.Once
	file_dissector_dissector_proto_rawDescData = file_dissector_dissector_proto_rawDesc
)

func file_dissector_dissector_proto_rawDescGZIP() []byte {
	file_dissector_dissector_proto_rawDescOnce.Do(func() {
		file_dissector_dissector_proto_rawDescData = protoimpl.X.CompressGZIP(file_dissector_dissector_proto_rawDescData)
	})
	return file_dissector_dissector_proto_rawDescData
}

var file_dissector_dissector_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dissector_dissector_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_dissector_dissector_proto_goTypes = []interface{}{
	(FunctionCode)(0),            // 0: dissector.FunctionCode
	(ExceptionCode)(0),           // 1: dissector.ExceptionCode
	(*DissectorBuffer)(nil),      // 2: dissector.DissectorBuffer
	(*TimedByte)(nil),            // 3: dissector.TimedByte
	(*ADU)(nil),                  // 4: dissector.ADU
	(*PDURequest)(nil),           // 5: dissector.PDURequest
	(*PDUResponse)(nil),          // 6: dissector.PDUResponse
	(*PDUResponseException)(nil), // 7: dissector.PDUResponseException
	(*Result)(nil),               // 8: dissector.Result
	(*timestamp.Timestamp)(nil),  // 9: google.protobuf.Timestamp
}
var file_dissector_dissector_proto_depIdxs = []int32{
	3, // 0: dissector.DissectorBuffer.timedBytes:type_name -> dissector.TimedByte
	9, // 1: dissector.TimedByte.time:type_name -> google.protobuf.Timestamp
	5, // 2: dissector.ADU.pduRequest:type_name -> dissector.PDURequest
	6, // 3: dissector.ADU.pduResponse:type_name -> dissector.PDUResponse
	7, // 4: dissector.ADU.pduResponseException:type_name -> dissector.PDUResponseException
	9, // 5: dissector.ADU.time:type_name -> google.protobuf.Timestamp
	4, // 6: dissector.Result.adu:type_name -> dissector.ADU
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_dissector_dissector_proto_init() }
func file_dissector_dissector_proto_init() {
	if File_dissector_dissector_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dissector_dissector_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DissectorBuffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dissector_dissector_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimedByte); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dissector_dissector_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dissector_dissector_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PDURequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dissector_dissector_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PDUResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dissector_dissector_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PDUResponseException); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dissector_dissector_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dissector_dissector_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ADU_PduRequest)(nil),
		(*ADU_PduResponse)(nil),
		(*ADU_PduResponseException)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dissector_dissector_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dissector_dissector_proto_goTypes,
		DependencyIndexes: file_dissector_dissector_proto_depIdxs,
		EnumInfos:         file_dissector_dissector_proto_enumTypes,
		MessageInfos:      file_dissector_dissector_proto_msgTypes,
	}.Build()
	File_dissector_dissector_proto = out.File
	file_dissector_dissector_proto_rawDesc = nil
	file_dissector_dissector_proto_goTypes = nil
	file_dissector_dissector_proto_depIdxs = nil
}
